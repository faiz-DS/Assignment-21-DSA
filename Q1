# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def inorder_traversal(node, values):
    if not node:
        return
    inorder_traversal(node.left, values)
    values.append(node.val)
    inorder_traversal(node.right, values)

def sorted_array_to_bst(arr):
    if not arr:
        return None

    mid = len(arr) // 2
    root = TreeNode(arr[mid])
    root.left = sorted_array_to_bst(arr[:mid])
    root.right = sorted_array_to_bst(arr[mid + 1:])

    return root

def binary_tree_to_bst(root):
    values = []
    inorder_traversal(root, values)
    sorted_values = sorted(values)
    return sorted_array_to_bst(sorted_values)

# Given binary tree
root = TreeNode(10)
root.left = TreeNode(2)
root.right = TreeNode(7)
root.left.left = TreeNode(8)
root.left.right = TreeNode(4)

# Convert to a binary search tree
new_root = binary_tree_to_bst(root)

# Print the new binary search tree (in-order traversal)
def print_inorder(node):
    if not node:
        return
    print_inorder(node.left)
    print(node.val, end=" ")
    print_inorder(node.right)

print_inorder(new_root)
"""output
(2 4 7 8 10
)"""